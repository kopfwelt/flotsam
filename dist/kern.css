@charset "UTF-8";
/**
 * Breakpoints
 */
/**
 * Typography
 */
/**
 * Strips units from a number
 */
/**
 * Convert value to REM
 */
/**
 * Convert value to EM
 */
/**
* Convert points to px
* by making up for the difference in DPI.
* you could also do $target& * 1.33333 and get the same result
*/
/**
* Convert points to REM
*/
/**
 * Animation
 */
/**
 * Iterative delay or the 'rolling piano effect'
 * puts a higher and higher transition-delay on items so they appear one after another
 */
/**
 * Left to right
 */
/**
 * Right to left
 */
/**
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.u-clearfix::before, .u-clearfix::after {
  content: ' ';
  /* 1 */
  display: table;
  /* 2 */ }

.u-clearfix::after {
  clear: both; }

.u-flex {
  display: flex; }

.u-rowwrap {
  flex-flow: row wrap; }

.u-column {
  flex-direction: column; }

.u-justifyCenter {
  justify-content: center; }

.u-justifySpaceBetween {
  justify-content: space-between; }

/**
 * Grids with flexbox
 */
.Grid {
  display: flex;
  flex-flow: row wrap; }

.Grid--alignCenter {
  justify-content: center; }

.Grid--alignRight {
  justify-content: flex-end; }

.Grid--space {
  justify-content: space-between; }

.Grid--alignMiddle {
  align-items: center; }

.Grid--alignBottom {
  align-items: flex-end; }

.Grid--center {
  justify-content: center;
  align-items: center; }

.Grid--nowrap {
  flex-wrap: nowrap; }

.Grid-img img {
  width: 100%; }

/**
 * Grid cells
 */
.Grid-cell {
  flex: 0 0 100%; }

.Grid-cell--first {
  order: -1; }

.Grid-cell--last {
  order: 999; }

.Grid-cell--reverse {
  display: flex;
  flex-flow: column; }
  @media (min-width: 414px) {
    .Grid-cell--reverse {
      flex-direction: row-reverse; } }
  @media (min-width: 768px) {
    .Grid-cell--reverse {
      flex-direction: inherit; } }

.Grid-cell--reverseTheFirst {
  display: flex;
  flex-flow: row wrap; }
  .Grid-cell--reverseTheFirst .Grid-cell--2of4 {
    flex-basis: 100%;
    order: -1; }
    @media (min-width: 768px) {
      .Grid-cell--reverseTheFirst .Grid-cell--2of4 {
        order: inherit;
        flex-basis: 50%; } }

/**
 * Grid sizes
 * (this only works because our grids don't have gutters at GB â€” @todo replace with Susy)
 */
.Grid-cell--1of2 {
  flex-basis: 100%; }
  @media (min-width: 768px) {
    .Grid-cell--1of2 {
      flex-basis: 50%; } }

.Grid-cell--2of2 {
  flex-basis: 100%;
  flex-direction: column; }
  @media (min-width: 768px) {
    .Grid-cell--2of2 {
      flex-flow: row wrap; } }

.Grid-cell--1of3 {
  flex-basis: 33.33333%; }

.Grid-cell--2of3 {
  flex-basis: 66.66667%; }

.Grid-cell--1of4 {
  flex-basis: 100%; }
  @media (min-width: 414px) {
    .Grid-cell--1of4 {
      flex-basis: 50%; } }
  @media (min-width: 768px) {
    .Grid-cell--1of4 {
      flex-basis: 25%; } }

.Grid-cell--2of4 {
  flex-basis: 50%; }

.Grid-cell--3of4 {
  flex-basis: 75%; }

.Grid-cell--4of4 {
  flex-basis: 100%; }

.Grid-cell--1of6 {
  flex-basis: 16.66667%; }

.Grid-cell--5of6 {
  flex-basis: 83.33333%; }

.Grid-cell--1of8 {
  flex-basis: 12.5%; }

.Grid-cell--3of8 {
  flex-basis: 37.5%; }

.Grid-cell--1of10 {
  flex-basis: 10%; }

/**
 * Starting to set do all grid classes has utilities so you may see double with the Grid modifier classes
 */
.u-gridcenter {
  justify-content: center;
  align-items: center; }

/**
 * @define utilities
 * Size: all!
 */
[class*="u-size"] {
  flex-basis: auto !important; }

.u-size1of12 {
  width: calc(100% * 1 / 12) !important; }

.u-size1of10 {
  width: 10% !important; }

.u-size1of8 {
  width: 12.5% !important; }

.u-size1of6,
.u-size2of12 {
  width: calc(100% * 1 / 6) !important; }

.u-size1of5,
.u-size2of10 {
  width: 20% !important; }

.u-size1of4,
.u-size2of8,
.u-size3of12 {
  width: 25% !important; }

.u-size3of10 {
  width: 30% !important; }

.u-size1of3,
.u-size2of6,
.u-size4of12 {
  width: calc(100% * 1 / 3) !important; }

.u-size3of8 {
  width: 37.5% !important; }

.u-size2of5,
.u-size4of10 {
  width: 40% !important; }

.u-size5of12 {
  width: calc(100% * 5 / 12) !important; }

.u-size1of2,
.u-size2of4,
.u-size3of6,
.u-size4of8,
.u-size5of10,
.u-size6of12 {
  width: 50% !important; }

.u-size7of12 {
  width: calc(100% * 7 / 12) !important; }

.u-size3of5,
.u-size6of10 {
  width: 60% !important; }

.u-size5of8 {
  width: 62.5% !important; }

.u-size2of3,
.u-size4of6,
.u-size8of12 {
  width: calc(100% * 2 / 3) !important; }

.u-size7of10 {
  width: 70% !important; }

.u-size3of4,
.u-size6of8,
.u-size9of12 {
  width: 75% !important; }

.u-size4of5,
.u-size8of10 {
  width: 80% !important; }

.u-size5of6,
.u-size10of12 {
  width: calc(100% * 5 / 6) !important; }

.u-size7of8 {
  width: 87.5% !important; }

.u-size9of10 {
  width: 90% !important; }

.u-size11of12 {
  width: calc(100% * 11 / 12) !important; }

/* Intrinsic widths
	 ========================================================================== */
/**
 * Make an element fill the remaining space.
 *
 * 1. Be explicit to work around IE10 bug with shorthand flex - http://git.io/vllC7
 * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes - http://git.io/vllMt
 */
.u-sizeFill {
  flex: 1 1 0% !important;
  /* 1 */
  flex-basis: 0% !important;
  /* 2 */ }

/**
 * An alternative method to make an element fill the remaining space.
 * Distributes space based on the initial width and height of the element
 *
 * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
 */
.u-sizeFillAlt {
  flex: 1 1 auto !important; }

/**
 * Make an element the width of its parent.
 */
.u-sizeFull {
  box-sizing: border-box !important;
  width: 100% !important; }

/**
 * Hide an element
 */
.u-hide {
  display: none; }

/**
 * @define utilities
 * Size: breakpoint 1 (small= > 0 < 660px)
 */
@media (min-width: 0) and (max-width: 660px) {
  /* Proportional widths: breakpoint 1 (small= > 0 < 660px)
		 ========================================================================== */
  /**
	 * Specify the proportional width of an object.
	 * Intentional redundancy build into each set of unit classes.
	 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
	 *
	 * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
	 *    http://git.io/vllMD
	 */
  /* postcss-bem-linter: ignore */
  [class*="u-sm-size"] {
    flex-basis: auto !important;
    /* 1 */ }
  .u-sm-size1of12 {
    width: calc(100% * 1 / 12) !important; }
  .u-sm-size1of10 {
    width: 10% !important; }
  .u-sm-size1of8 {
    width: 12.5% !important; }
  .u-sm-size1of6,
  .u-sm-size2of12 {
    width: calc(100% * 1 / 6) !important; }
  .u-sm-size1of5,
  .u-sm-size2of10 {
    width: 20% !important; }
  .u-sm-size1of4,
  .u-sm-size2of8,
  .u-sm-size3of12 {
    width: 25% !important; }
  .u-sm-size3of10 {
    width: 30% !important; }
  .u-sm-size1of3,
  .u-sm-size2of6,
  .u-sm-size4of12 {
    width: calc(100% * 1 / 3) !important; }
  .u-sm-size3of8 {
    width: 37.5% !important; }
  .u-sm-size2of5,
  .u-sm-size4of10 {
    width: 40% !important; }
  .u-sm-size5of12 {
    width: calc(100% * 5 / 12) !important; }
  .u-sm-size1of2,
  .u-sm-size2of4,
  .u-sm-size3of6,
  .u-sm-size4of8,
  .u-sm-size5of10,
  .u-sm-size6of12 {
    width: 50% !important; }
  .u-sm-size7of12 {
    width: calc(100% * 7 / 12) !important; }
  .u-sm-size3of5,
  .u-sm-size6of10 {
    width: 60% !important; }
  .u-sm-size5of8 {
    width: 62.5% !important; }
  .u-sm-size2of3,
  .u-sm-size4of6,
  .u-sm-size8of12 {
    width: calc(100% * 2 / 3) !important; }
  .u-sm-size7of10 {
    width: 70% !important; }
  .u-sm-size3of4,
  .u-sm-size6of8,
  .u-sm-size9of12 {
    width: 75% !important; }
  .u-sm-size4of5,
  .u-sm-size8of10 {
    width: 80% !important; }
  .u-sm-size5of6,
  .u-sm-size10of12 {
    width: calc(100% * 5 / 6) !important; }
  .u-sm-size7of8 {
    width: 87.5% !important; }
  .u-sm-size9of10 {
    width: 90% !important; }
  .u-sm-size11of12 {
    width: calc(100% * 11 / 12) !important; }
  /* Intrinsic widths
		 ========================================================================== */
  /**
	 * Make an element fill the remaining space.
	 *
	 * 1. Be explicit to work around IE10 bug with shorthand flex - http://git.io/vllC7
	 * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes - http://git.io/vllMt
	 */
  .u-sm-sizeFill {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
	 * An alternative method to make an element fill the remaining space.
	 * Distributes space based on the initial width and height of the element
	 *
	 * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
	 */
  .u-sm-sizeFillAlt {
    flex: 1 1 auto !important; }
  /**
	 * Make an element the width of its parent.
	 */
  .u-sm-sizeFull {
    box-sizing: border-box !important;
    width: 100% !important; }
  /**
	 * Hide an element
	 */
  .u-sm-hide {
    display: none; } }

/**
 * @define utilities
 * Size: breakpoint 2 (medium=  > 660px < 1024px)
 */
@media (min-width: 660px) and (max-width: 1024px) {
  /* Proportional widths: breakpoint 2 (medium=  > 660px < 1024px)
		 ========================================================================== */
  /**
	 * Specify the proportional width of an object.
	 * Intentional redundancy build into each set of unit classes.
	 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
	 *
	 * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
	 *    http://git.io/vllMD
	 */
  /* postcss-bem-linter: ignore */
  [class*="u-md-size"] {
    flex-basis: auto !important;
    /* 1 */ }
  .u-md-size1of12 {
    width: calc(100% * 1 / 12) !important; }
  .u-md-size1of10 {
    width: 10% !important; }
  .u-md-size1of8 {
    width: 12.5% !important; }
  .u-md-size1of6,
  .u-md-size2of12 {
    width: calc(100% * 1 / 6) !important; }
  .u-md-size1of5,
  .u-md-size2of10 {
    width: 20% !important; }
  .u-md-size1of4,
  .u-md-size2of8,
  .u-md-size3of12 {
    width: 25% !important; }
  .u-md-size3of10 {
    width: 30% !important; }
  .u-md-size1of3,
  .u-md-size2of6,
  .u-md-size4of12 {
    width: calc(100% * 1 / 3) !important; }
  .u-md-size3of8 {
    width: 37.5% !important; }
  .u-md-size2of5,
  .u-md-size4of10 {
    width: 40% !important; }
  .u-md-size5of12 {
    width: calc(100% * 5 / 12) !important; }
  .u-md-size1of2,
  .u-md-size2of4,
  .u-md-size3of6,
  .u-md-size4of8,
  .u-md-size5of10,
  .u-md-size6of12 {
    width: 50% !important; }
  .u-md-size7of12 {
    width: calc(100% * 7 / 12) !important; }
  .u-md-size3of5,
  .u-md-size6of10 {
    width: 60% !important; }
  .u-md-size5of8 {
    width: 62.5% !important; }
  .u-md-size2of3,
  .u-md-size4of6,
  .u-md-size8of12 {
    width: calc(100% * 2 / 3) !important; }
  .u-md-size7of10 {
    width: 70% !important; }
  .u-md-size3of4,
  .u-md-size6of8,
  .u-md-size9of12 {
    width: 75% !important; }
  .u-md-size4of5,
  .u-md-size8of10 {
    width: 80% !important; }
  .u-md-size5of6,
  .u-md-size10of12 {
    width: calc(100% * 5 / 6) !important; }
  .u-md-size7of8 {
    width: 87.5% !important; }
  .u-md-size9of10 {
    width: 90% !important; }
  .u-md-size11of12 {
    width: calc(100% * 11 / 12) !important; }
  /* Intrinsic widths
		 ========================================================================== */
  /**
	 * Make an element fill the remaining space.
	 *
	 * 1. Be explicit to work around IE10 bug with shorthand flex - http://git.io/vllC7
	 * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes - http://git.io/vllMt
	 */
  .u-md-sizeFill {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
	 * An alternative method to make an element fill the remaining space.
	 * Distributes space based on the initial width and height of the element
	 *
	 * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
	 */
  .u-md-sizeFillAlt {
    flex: 1 1 auto !important; }
  /**
	 * Make an element the width of its parent.
	 */
  .u-md-sizeFull {
    box-sizing: border-box !important;
    width: 100% !important; }
  /**
	 * Hide an element
	 */
  .u-md-hide {
    display: none; } }

/**
 * @define utilities
 * Size: breakpoint 3 (large= >1024px)
 */
@media (min-width: 1024px) {
  /* Proportional widths: breakpoint 3 (large= >1024px)
		 ========================================================================== */
  /**
	 * Specify the proportional width of an object.
	 * Intentional redundancy build into each set of unit classes.
	 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
	 *
	 * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
	 *    http://git.io/vllMD
	 */
  /* postcss-bem-linter: ignore */
  [class*="u-lg-size"] {
    flex-basis: auto !important;
    /* 1 */ }
  .u-lg-size1of12 {
    width: calc(100% * 1 / 12) !important; }
  .u-lg-size1of10 {
    width: 10% !important; }
  .u-lg-size1of8 {
    width: 12.5% !important; }
  .u-lg-size1of6,
  .u-lg-size2of12 {
    width: calc(100% * 1 / 6) !important; }
  .u-lg-size1of5,
  .u-lg-size2of10 {
    width: 20% !important; }
  .u-lg-size1of4,
  .u-lg-size2of8,
  .u-lg-size3of12 {
    width: 25% !important; }
  .u-lg-size3of10 {
    width: 30% !important; }
  .u-lg-size1of3,
  .u-lg-size2of6,
  .u-lg-size4of12 {
    width: calc(100% * 1 / 3) !important; }
  .u-lg-size3of8 {
    width: 37.5% !important; }
  .u-lg-size2of5,
  .u-lg-size4of10 {
    width: 40% !important; }
  .u-lg-size5of12 {
    width: calc(100% * 5 / 12) !important; }
  .u-lg-size1of2,
  .u-lg-size2of4,
  .u-lg-size3of6,
  .u-lg-size4of8,
  .u-lg-size5of10,
  .u-lg-size6of12 {
    width: 50% !important; }
  .u-lg-size7of12 {
    width: calc(100% * 7 / 12) !important; }
  .u-lg-size3of5,
  .u-lg-size6of10 {
    width: 60% !important; }
  .u-lg-size5of8 {
    width: 62.5% !important; }
  .u-lg-size2of3,
  .u-lg-size4of6,
  .u-lg-size8of12 {
    width: calc(100% * 2 / 3) !important; }
  .u-lg-size7of10 {
    width: 70% !important; }
  .u-lg-size3of4,
  .u-lg-size6of8,
  .u-lg-size9of12 {
    width: 75% !important; }
  .u-lg-size4of5,
  .u-lg-size8of10 {
    width: 80% !important; }
  .u-lg-size5of6,
  .u-lg-size10of12 {
    width: calc(100% * 5 / 6) !important; }
  .u-lg-size7of8 {
    width: 87.5% !important; }
  .u-lg-size9of10 {
    width: 90% !important; }
  .u-lg-size11of12 {
    width: calc(100% * 11 / 12) !important; }
  /* Intrinsic widths
		 ========================================================================== */
  /**
	 * Make an element fill the remaining space.
	 *
	 * 1. Be explicit to work around IE10 bug with shorthand flex - http://git.io/vllC7
	 * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes - http://git.io/vllMt
	 */
  .u-lg-sizeFill {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
	 * An alternative method to make an element fill the remaining space.
	 * Distributes space based on the initial width and height of the element
	 *
	 * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
	 */
  .u-lg-sizeFillAlt {
    flex: 1 1 auto !important; }
  /**
	 * Make an element the width of its parent.
	 */
  .u-lg-sizeFull {
    box-sizing: border-box !important;
    width: 100% !important; }
  /**
	 * Hide an element
	 */
  .u-lg-hide {
    display: none; } }

/**
 * @define utilities
 * Size: breakpoint 3 (large= >1024px)
 */
@media (min-width: 1440px) {
  /* Proportional widths: breakpoint 3 (large= >1024px)
		 ========================================================================== */
  /**
	 * Specify the proportional width of an object.
	 * Intentional redundancy build into each set of unit classes.
	 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
	 *
	 * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
	 *    http://git.io/vllMD
	 */
  /* postcss-bem-linter: ignore */
  [class*="u-xl-size"] {
    flex-basis: auto !important;
    /* 1 */ }
  .u-xl-size1of12 {
    width: calc(100% * 1 / 12) !important; }
  .u-xl-size1of10 {
    width: 10% !important; }
  .u-xl-size1of8 {
    width: 12.5% !important; }
  .u-xl-size1of6,
  .u-xl-size2of12 {
    width: calc(100% * 1 / 6) !important; }
  .u-xl-size1of5,
  .u-xl-size2of10 {
    width: 20% !important; }
  .u-xl-size1of4,
  .u-xl-size2of8,
  .u-xl-size3of12 {
    width: 25% !important; }
  .u-xl-size3of10 {
    width: 30% !important; }
  .u-xl-size1of3,
  .u-xl-size2of6,
  .u-xl-size4of12 {
    width: calc(100% * 1 / 3) !important; }
  .u-xl-size3of8 {
    width: 37.5% !important; }
  .u-xl-size2of5,
  .u-xl-size4of10 {
    width: 40% !important; }
  .u-xl-size5of12 {
    width: calc(100% * 5 / 12) !important; }
  .u-xl-size1of2,
  .u-xl-size2of4,
  .u-xl-size3of6,
  .u-xl-size4of8,
  .u-xl-size5of10,
  .u-xl-size6of12 {
    width: 50% !important; }
  .u-xl-size7of12 {
    width: calc(100% * 7 / 12) !important; }
  .u-xl-size3of5,
  .u-xl-size6of10 {
    width: 60% !important; }
  .u-xl-size5of8 {
    width: 62.5% !important; }
  .u-xl-size2of3,
  .u-xl-size4of6,
  .u-xl-size8of12 {
    width: calc(100% * 2 / 3) !important; }
  .u-xl-size7of10 {
    width: 70% !important; }
  .u-xl-size3of4,
  .u-xl-size6of8,
  .u-xl-size9of12 {
    width: 75% !important; }
  .u-xl-size4of5,
  .u-xl-size8of10 {
    width: 80% !important; }
  .u-xl-size5of6,
  .u-xl-size10of12 {
    width: calc(100% * 5 / 6) !important; }
  .u-xl-size7of8 {
    width: 87.5% !important; }
  .u-xl-size9of10 {
    width: 90% !important; }
  .u-xl-size11of12 {
    width: calc(100% * 11 / 12) !important; }
  /* Intrinsic widths
		 ========================================================================== */
  /**
	 * Make an element fill the remaining space.
	 *
	 * 1. Be explicit to work around IE10 bug with shorthand flex - http://git.io/vllC7
	 * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes - http://git.io/vllMt
	 */
  .u-xl-sizeFill {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
	 * An alternative method to make an element fill the remaining space.
	 * Distributes space based on the initial width and height of the element
	 *
	 * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
	 */
  .u-xl-sizeFillAlt {
    flex: 1 1 auto !important; }
  /**
	 * Make an element the width of its parent.
	 */
  .u-xl-sizeFull {
    box-sizing: border-box !important;
    width: 100% !important; }
  /**
	 * Hide an element
	 */
  .u-xl-hide {
    display: none; } }

/**
 * Hides the text in an element, commonly used to show an image. Some elements will need
 * block-level styles applied.
 * @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
 */
.u-hideText {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap; }

/**
 * Predefined navigation mixins
 */
/**
 * Negative text
 * use this for whitish text on blackish backgrounds
 *
 * it will make type appear lighter but it also DISABLED subpixel antialiasing which isn't always good
 */
/**
 * Position Mixins
 */
.u-noScroll {
  position: fixed;
  overflow-y: scroll; }

/**
 * Text truncate
 */
.u-textTruncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap; }

/**
 * Color definitions
 */
/**
 * Good looking animations
 */
/**
 * Spacing definitions
 */
/**
 * Layout definitions
 */
/* Susy */
/**
 * Resets default margins
 */
body {
  margin: 0; }

h1,
h2,
h3,
h4,
h5,
h6,
p,
dl,
ol,
ul,
blockquote,
pre,
fieldset,
table,
address,
figure {
  margin-top: 0;
  margin-bottom: 1.6rem; }

iframe,
img,
canvas,
video,
audio,
embed {
  max-width: 100%; }

a,
a:visited {
  color: black; }

/**
 * General button styles
 */
.Button {
  border: 1px solid black;
  cursor: pointer;
  display: inline-block;
  font: inherit;
  line-height: normal;
  position: relative;
  text-align: center;
  text-decoration: none;
  user-select: none;
  white-space: normal;
  padding: 0.3em 1rem 0.25em;
  color: black; }

/* UI states */
.Button:hover,
.Button:focus {
  text-decoration: none; }

.Button:disabled {
  cursor: default;
  opacity: 0.75; }

/* Modifiers */
.Button--negative {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: black;
  color: white; }

.Button--icon > span {
  display: flex;
  flex-flow: row nowrap;
  align-items: center; }

.Button--icon i {
  margin-left: 0.5rem; }

/* Types */
.ButtonClose {
  content: 'Ã—'; }

/**
 * Forms
 */
label {
  display: block; }

input[type="color"], input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="email"], input[type="month"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="time"], input[type="url"], input[type="week"], input:not([type]), textarea {
  width: 100%;
  max-width: 100%;
  padding: 0.3em 0.5em 0.25em;
  border: 1px solid #cccccc; }

/* Validation */
input,
textarea {
  width: 100%; }
  input.error, input.parsley-error,
  textarea.error,
  textarea.parsley-error {
    box-shadow: 0 0 2px 2px red;
    border-color: red; }

ul.parsley-error-list {
  display: none !important; }

html {
  background-color: white; }

/**
 * Icons
 */
svg {
  max-height: 100%; }

[class^="icon-"],
[class*=" icon-"] {
  display: inline-block;
  background-position: 0 0;
  background-repeat: no-repeat;
  background-size: contain;
  fill: currentColor;
  width: 1.33333rem;
  height: 1.33333rem; }
  [class^="icon-"] svg,
  [class*=" icon-"] svg {
    width: 100%;
    height: 100%; }

img {
  height: auto;
  vertical-align: bottom; }

/**
 * Global styles (avoid anything but element selectors here)
 */
html {
  color: black;
  text-rendering: optimizeLegibility;
  font-feature-settings: "kern" 1;
  font-kerning: normal; }
  @media (min-width: 1280px) {
    html {
      font-size: 17px; } }

/**
 * Navigation
 */
/**
 * Footer
 */
/**
 * Header
 */
